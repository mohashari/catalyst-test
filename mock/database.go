// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/brand_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mohashari/catalyst-test/model"
)

// MockBrandRepo is a mock of BrandRepo interface.
type MockBrandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBrandRepoMockRecorder
}

// MockBrandRepoMockRecorder is the mock recorder for MockBrandRepo.
type MockBrandRepoMockRecorder struct {
	mock *MockBrandRepo
}

// NewMockBrandRepo creates a new mock instance.
func NewMockBrandRepo(ctrl *gomock.Controller) *MockBrandRepo {
	mock := &MockBrandRepo{ctrl: ctrl}
	mock.recorder = &MockBrandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandRepo) EXPECT() *MockBrandRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockBrandRepo) Insert(ctx context.Context, model model.Brand) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockBrandRepoMockRecorder) Insert(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBrandRepo)(nil).Insert), ctx, model)
}
