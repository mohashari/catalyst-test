// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mohashari/catalyst-test/model"
)

// MockBrandRepo is a mock of BrandRepo interface.
type MockBrandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBrandRepoMockRecorder
}

// MockBrandRepoMockRecorder is the mock recorder for MockBrandRepo.
type MockBrandRepoMockRecorder struct {
	mock *MockBrandRepo
}

// NewMockBrandRepo creates a new mock instance.
func NewMockBrandRepo(ctrl *gomock.Controller) *MockBrandRepo {
	mock := &MockBrandRepo{ctrl: ctrl}
	mock.recorder = &MockBrandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandRepo) EXPECT() *MockBrandRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockBrandRepo) GetByID(ctx context.Context, id int64) (model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBrandRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBrandRepo)(nil).GetByID), ctx, id)
}

// Insert mocks base method.
func (m *MockBrandRepo) Insert(ctx context.Context, model model.Brand) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockBrandRepoMockRecorder) Insert(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBrandRepo)(nil).Insert), ctx, model)
}

// MockCustomerRepo is a mock of CustomerRepo interface.
type MockCustomerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepoMockRecorder
}

// MockCustomerRepoMockRecorder is the mock recorder for MockCustomerRepo.
type MockCustomerRepoMockRecorder struct {
	mock *MockCustomerRepo
}

// NewMockCustomerRepo creates a new mock instance.
func NewMockCustomerRepo(ctrl *gomock.Controller) *MockCustomerRepo {
	mock := &MockCustomerRepo{ctrl: ctrl}
	mock.recorder = &MockCustomerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepo) EXPECT() *MockCustomerRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCustomerRepo) GetByID(ctx context.Context, id int64) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCustomerRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerRepo)(nil).GetByID), ctx, id)
}

// MockOrderDetailRepo is a mock of OrderDetailRepo interface.
type MockOrderDetailRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDetailRepoMockRecorder
}

// MockOrderDetailRepoMockRecorder is the mock recorder for MockOrderDetailRepo.
type MockOrderDetailRepoMockRecorder struct {
	mock *MockOrderDetailRepo
}

// NewMockOrderDetailRepo creates a new mock instance.
func NewMockOrderDetailRepo(ctrl *gomock.Controller) *MockOrderDetailRepo {
	mock := &MockOrderDetailRepo{ctrl: ctrl}
	mock.recorder = &MockOrderDetailRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDetailRepo) EXPECT() *MockOrderDetailRepoMockRecorder {
	return m.recorder
}

// GetDetailByOrderID mocks base method.
func (m *MockOrderDetailRepo) GetDetailByOrderID(ctx context.Context, id int64) ([]model.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByOrderID", ctx, id)
	ret0, _ := ret[0].([]model.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByOrderID indicates an expected call of GetDetailByOrderID.
func (mr *MockOrderDetailRepoMockRecorder) GetDetailByOrderID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByOrderID", reflect.TypeOf((*MockOrderDetailRepo)(nil).GetDetailByOrderID), ctx, id)
}

// Insert mocks base method.
func (m *MockOrderDetailRepo) Insert(ctx context.Context, orderDetail model.OrderDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, orderDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrderDetailRepoMockRecorder) Insert(ctx, orderDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrderDetailRepo)(nil).Insert), ctx, orderDetail)
}

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockOrderRepo) GetByID(ctx context.Context, id int64) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepo)(nil).GetByID), ctx, id)
}

// Insert mocks base method.
func (m *MockOrderRepo) Insert(ctx context.Context, order model.Order) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockOrderRepoMockRecorder) Insert(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrderRepo)(nil).Insert), ctx, order)
}

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// GetByBrandID mocks base method.
func (m *MockProductRepo) GetByBrandID(ctx context.Context, id int64) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBrandID", ctx, id)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBrandID indicates an expected call of GetByBrandID.
func (mr *MockProductRepoMockRecorder) GetByBrandID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBrandID", reflect.TypeOf((*MockProductRepo)(nil).GetByBrandID), ctx, id)
}

// GetByID mocks base method.
func (m *MockProductRepo) GetByID(ctx context.Context, id int64) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProductRepo)(nil).GetByID), ctx, id)
}

// Insert mocks base method.
func (m *MockProductRepo) Insert(ctx context.Context, model model.Product) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProductRepoMockRecorder) Insert(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductRepo)(nil).Insert), ctx, model)
}
